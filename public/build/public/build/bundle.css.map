{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\CreateHost.svelte",
    "..\\..\\DeleteHost.svelte",
    "..\\..\\GetMatching.svelte",
    "..\\..\\GetStories.svelte",
    "..\\..\\GetStoryline.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport {onMount} from 'svelte';\n\timport * as lib from './lib.js';\n\timport GetStories from \"./components/GetStories.svelte\";\n\timport CreateHost from \"./components/CreateHost.svelte\";\n\timport DeleteHost from \"./components/DeleteHost.svelte\";\n\timport GetStoryline from \"./components/GetStoryline.svelte\";\n\timport GetMatching from \"./components/GetMatching.svelte\";\n\timport HostList from \"./components/HostList.svelte\";\n\timport GetReport from \"./components/GetReport.svelte\";\n\n\tonMount(async () => {\n\t\tlib.login();\n\t});\n\n</script>\n\n<main>\n\t<h1>Storymatcher</h1>\n\t<h2>API Test</h2>\n\t<p>All data objects are logged at the browser debug console.</p>\n\n\t<details>\n\t\t<summary>Set current storyline host.</summary>\n\t\t<div class=\"detailsWrapper\">\n\t\t<HostList></HostList>\n\t\t</div>\n\t</details>\n\t<details>\n\t\t<summary>Create a host entity</summary>\n\t\t<div class=\"detailsWrapper\">\n\t\t\t<CreateHost></CreateHost>\n\t\t</div>\n\t</details>\n\t<details>\n\t\t<summary>Set storyline</summary>\n\t\t<div class=\"detailsWrapper\">\n\t\t\t<GetStories></GetStories>\n\t\t</div>\n\t</details>\n\t<details>\n\t\t<summary>Get current storyline</summary>\n\t\t<div class=\"detailsWrapper\">\n\t\t\t<GetStoryline></GetStoryline>\n\t\t</div>\n\t</details>\n\t<details>\n\t\t<summary>Get current report</summary>\n\t\t<div class=\"detailsWrapper\">\n\t\t\t<GetReport></GetReport>\n\t\t</div>\n\t</details>\n\n\t<details>\n\t\t<summary>Get matching for current host</summary>\n\t\t<GetMatching></GetMatching>\n\t</details>\n\t<details>\n\t\t<summary>Delete host entity</summary>\n\t\t<DeleteHost></DeleteHost>\n\t</details>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 1200px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4rem;\n\t\tfont-weight: 100;\n\t}\n\n\th2 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 2.45rem;\n\t\tfont-weight: 100;\n\t}\n\n\n\tdetails {\n\t\tmargin-bottom: 2rem;\n\t}\n\n\tdetails summary{\n\t\tdisplay: block;\n\t\tfont-size: 1.5rem;\n\t\tfont-weight: 700;\n\t\ttext-transform: uppercase;\n\t\tborder: 3px solid #4741bf;\n\t\tcolor: #333;\n\t\tmargin-bottom: 0;\n\t\tcursor: pointer;\n\t}\n\n\t.detailsWrapper {\n\t\tpadding: 1rem;\n\t\tborder-left: 1px solid #ccc;\n\t\tborder-right: 1px solid #ccc;\n\t\tborder-bottom: 1px solid #ccc;\n\t}\n\n\n</style>",
    "<script>\n    import { createHost } from '../lib.js';\n    import * as stores from '../stores.js';\n    import {get} from 'svelte/store';\n\n    let hostEntity = get(stores.host_entity);\n    let hostId = hostEntity.hostId ? hostEntity.hostId : '';\n    let hostType = hostEntity.hostType ? hostEntity.hostType : '';\n    let hostLanguage = hostEntity.hostLanguage ? hostEntity.hostLanguage : 'en';\n\n    const setHost = () => {\n      if (stores.access_token.toString() !== '') {\n        createHost(hostId, hostType, hostLanguage);\n        stores.host_entity.set({'hostId': hostId, 'hostType': hostType, 'hostLanguage': hostLanguage});\n      } else {\n        console.log('Login first');\n      }\n    };\n\n</script>\n\n<h3>Why create a host entity?</h3>\n<div class=\"description\">\n    <p>\n        This step simulates the information provided to the API if a new host entity at a partner platform is getting ready to use the matching service for the first time.<br>\n        It could be invoked on initial user registration, booking of a paid service or first use of the storyline creation interface.<br>\n        Every entity using the matching service or should be matched against have to create such a host entity.\n    </p>\n</div>\n<fieldset>\n    <label>Host Id</label><input type=\"text\" bind:value=\"{hostId}\" placeholder=\"a string as unique id\">\n    <label>Host Type</label><input type=\"text\" bind:value=\"{hostType}\" placeholder=\"'job' or 'user'\"><br>\n    <label>Host Language</label><select type=\"text\" bind:value=\"{hostLanguage}\"><option value=\"en\">EN</option><option value=\"de\">DE</option></select><br>\n    <button on:click={setHost}>Create Host</button>\n</fieldset>\n\n<style>\n    fieldset {\n      background-color: rgba(0,0,0,0.04);\n      border: none;\n      margin: 2rem auto;\n      max-width: 60%;\n      padding: 1rem;\n    }\n\n    input, select {\n      width: 100%;\n      margin-bottom: 1rem;\n    }\n\n    label {\n      text-align: left;\n      text-transform: uppercase;\n    }\n\n</style>",
    "<script>\n    import { deleteHost } from '../lib.js';\n    import * as stores from '../stores.js';\n    import {get} from 'svelte/store';\n\n    let hostEntity = get(stores.host_entity);\n    let hostId = hostEntity.hostId ? hostEntity.hostId : '';\n    let hostType = hostEntity.hostType ? hostEntity.hostType : '';\n    let hostLanguage = hostEntity.hostLanguage ? hostEntity.hostLanguage : '';\n\n    const deleteHostCallback = () => {\n        deleteHost(hostId, hostType);\n    };\n\n</script>\n\n<h3>Why delete a host entity?</h3>\n<div class=\"description\">\n    <p>\n        This step simulates the information provided to the API if a host entity at a partner platform is being deleted or no longer subscribes to the service.<br>\n        every information associated with this entity is deleted on the APIs database.\n    </p>\n</div>\n<fieldset>\n    <label>Host Id</label><input type=\"text\" bind:value=\"{hostId}\" placeholder=\"a string as unique id\">\n    <label>Host Type</label><input type=\"text\" bind:value=\"{hostType}\" placeholder=\"'job' or 'user'\"><br>\n    <button on:click={deleteHostCallback}>Delete Host</button>\n</fieldset>\n\n<style>\n    fieldset {\n      background-color: rgba(0,0,0,0.04);\n      border: none;\n      margin: 2rem auto;\n      max-width: 60%;\n      padding: 1rem;\n    }\n\n    input, select {\n      width: 100%;\n      margin-bottom: 1rem;\n    }\n\n    label {\n      text-align: left;\n      text-transform: uppercase;\n    }\n\n</style>",
    "<script>\n\n  import {getAllHosts, getMatching} from \"../lib\";\n  import {base_host} from '../stores.js'\n  import Host from \"./Host.svelte\";\n  import {get} from \"svelte/store\";\n\n  let initial = true;\n\n  let allHosts = [];\n  let filteredHosts = [];\n  let matchingHosts = [];\n\n  let baseHost = '';\n\n  const getFilterHosts = async () => {\n    let response = await getAllHosts();\n    if (response) {\n      allHosts = JSON.parse(response);\n    }\n  }\n\n  const getMatchingHosts = async () => {\n    baseHost = JSON.parse(get(base_host));\n    let response = await getMatching(baseHost.HostEntityType, baseHost.HostEntityId, filteredHosts);\n    if (response) {\n      console.log(response);\n      matchingHosts = response;\n      initial = false;\n    }\n  }\n</script>\n{#if initial}\n    <h3>1. Get a filter list.</h3>\n    <p>To only match a prefilterd list of options we need to simulate a filter process by selection in the ui.</p>\n    <button on:click={getFilterHosts}>Get all current hosts</button>\n    {#if (allHosts.length > 0)}\n    <fieldset>\n        {#each allHosts as host }\n            {#if (JSON.stringify(host) != get(base_host)) }\n                <label>\n                    <input type=\"checkbox\" bind:group={filteredHosts} value=\"{JSON.stringify(host)}\"/>\n                    HostId: {host.HostEntityId} Type: {host.HostEntityType}\n                </label>\n            {/if}\n        {/each}\n    </fieldset>\n    {/if}\n    <h3>2. Get Matchings</h3>\n    <p>Annotate the filterd list with matching results</p>\n    <button on:click={getMatchingHosts}>Get matches</button>\n{/if}\n{#if matchingHosts }\n    <h3>Matches</h3>\n    {#if matchingHosts.length > 0 }\n        <ul>\n            {#each matchingHosts as host }\n                <li>\n                    <Host host={host}/>\n                </li>\n            {/each}\n        </ul>\n    {:else}\n        <p>No matching hosts found.</p>\n    {/if}\n{/if}\n\n<style>\n  label {\n    display: inline;\n  }\n  ul {\n    list-style: none;\n  }\n\n  li {\n    border: 1px solid #ccc;\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.2);\n    margin-bottom: 1rem;\n    padding: 1rem;\n  }\n</style>",
    "<script>\n    import {getStories} from '../lib.js';\n    import {selectStories} from '../lib.js';\n    import {saveStoryline} from '../lib.js';\n    import Story from \"./Story.svelte\";\n\n    let storyline;\n    let stories = [];\n    let initial = true;\n    let disabled = '';\n\n    const getInitStories = async () => {\n        let response = await getStories();\n        if (response) {\n            storyline = response.Storyline;\n            stories = response.Stories;\n            initial = false;\n        }\n    }\n\n    const postStorySelection = async (story) => {\n        storyline.Stories.push(story);\n        let response = await selectStories(storyline);\n        if (response) {\n            storyline = response.Storyline;\n            stories = response.Stories;\n        }\n    }\n\n    const saveStorySelection = async () => {\n        let response = await saveStoryline(storyline);\n        if (response) {\n            disabled = 'disabled=\"disabled\"';\n        }\n    }\n\n</script>\n{#if initial}\n    <h3>Begin storyline selection.</h3>\n    <p>This step have to be performed before matching but can be repeated from time to time to keep your matching index in sync with your personal development.</p>\n    <button on:click={getInitStories}>Get Stories</button>\n{:else}\n    <h3>Choose stories to calculate your matching index.</h3>\n{/if}\n\n{#if stories.length > 0}\n<div>\n    <h4>Please select a story that appeals to you by clicking on the text.</h4>\n</div>\n<ul>\n    {#each stories as story}\n        <li on:click={postStorySelection(story)}><Story story={story}></Story></li>\n    {/each}\n</ul>\n{:else if !initial && storyline.CompletedMarker == true}\n    <h4>Thank you for your selection.</h4>\n    <p>Your index is calculated and you can set this selection active by clicking the button.</p>\n    <p>This function is usefull as draft / publish option or a possibility to pause and resume your selection.<br>\n    The logic for resume would be to check for an existing and not completed storyline for this host entity and call the selection again with this object.</p>\n    <button on:click={saveStorySelection} {disabled}>Accept Selection</button>\n{/if}\n\n<style>\n    ul {\n        list-style: none;\n    }\n\n    li {\n        border: 1px solid #ccc;\n        box-shadow: 2px 2px 3px rgba(0,0,0, 0.2);\n        margin-bottom: 1rem;\n        padding: 1rem;\n        cursor: pointer;\n    }\n\n    li:hover {\n        box-shadow: 1px 1px 4px rgba(0,0,0, 0.4);\n    }\n</style>",
    "<script>\n    import {getStoryline} from '../lib.js';\n    import {base_host} from '../stores.js';\n    import {get} from \"svelte/store\";\n\n\n    let stories = [];\n    const getCurrentStoryline = async () => {\n      // Call with example id and type\n      //let response = await getStoryline('user', '111');\n\n      // Take current host from stored value\n      let currentHost = JSON.parse(get(base_host));\n      let response = await getStoryline(currentHost.HostEntityType, currentHost.HostEntityId);\n      if(response) {\n          stories = response.Stories;\n      }\n    }\n</script>\n<button on:click={getCurrentStoryline}>Get Storyline</button>\n{#if stories.length > 0 }\n<h3>Current story selection</h3>\n  <p>\n      Getting the current storyline is useful for end users to check their previous selection if it still fits. This endpoint can also be used as a starting point for pause / resume function in the story selection process.\n  </p>\n    <fieldset>\n    <ol>\n  {#each stories as story}\n      <li>{story.Title}</li>\n  {/each}\n    </ol>\n    </fieldset>\n{/if}\n\n<style>\n  fieldset {\n    background-color: rgba(0,0,0,0.04);\n    border: none;\n    margin: 2rem auto;\n    max-width: 60%;\n    padding: 1rem;\n    text-align: left;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}